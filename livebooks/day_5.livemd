# Day 5

```elixir
Mix.install([
  {:kino_aoc, git: "https://github.com/ljgago/kino_aoc"}
])
```

## Section

<!-- livebook:{"attrs":{"day":"5","session_secret":"AOC_SESSION_ID","variable":"puzzle_input","year":"2022"},"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} = KinoAOC.download_puzzle("2022", "5", System.fetch_env!("LB_AOC_SESSION_ID"))
```

```elixir
defmodule Day5 do
  def parse_stacks("", 3), do: nil

  def parse_stacks(
        <<_::utf8, l1::utf8, _::binary-size(3), _l2::utf8, _::binary-size(3), _l3::utf8,
          _::utf8>>,
        3
      )
      when l1 == 49,
      do: nil

  def parse_stacks(
        <<_::utf8, l1::utf8, _::binary-size(3), l2::utf8, _::binary-size(3), l3::utf8, _::utf8>>,
        3
      ) do
    %{
      s1: if(l1 == 32, do: nil, else: l1),
      s2: if(l2 == 32, do: nil, else: l2),
      s3: if(l3 == 32, do: nil, else: l3)
    }
  end

  def parse(s), do: parse(s, 1, %{}, [])
  # EOF
  def parse(<<>>, stack_number, stacks, moves), do: %{stacks: stacks, moves: moves}
  # New line, reset stack number
  def parse(<<?\n::utf8, rest::binary>>, stack_number, stacks, moves),
    do: parse(rest, 1, stacks, moves)

  # Matching an empty stack
  def parse(<<?\s::utf8, ?\s::utf8, ?\s::utf8, rest::binary>>, stack_number, stacks, moves) do
    parse(rest, stack_number, stacks, moves)
  end

  # Matching a stack
  def parse(<<?[::utf8, box::utf8, ?]::utf8, rest::binary>>, stack_number, stacks, moves) do
    stacks =
      Map.update(stacks, Integer.to_string(stack_number), [box], fn boxes -> [box | boxes] end)

    parse(rest, stack_number, stacks, moves)
  end

  # Stack separator
  def parse(<<?\s::utf8, rest::binary>>, stack_number, stacks, moves),
    do: parse(rest, stack_number + 1, stacks, moves)

  # Matches instructions beginning
  def parse("move " <> _rest = instructions, _stack_number, stacks, moves) do
    moves =
      String.split(instructions, "\n", trim: true)
      |> Enum.map(fn instruction ->
        [_, nb, _, from, _, to] = String.split(instruction)
        %{from: from, to: to, nb: String.to_integer(nb)}
      end)

    stacks = Enum.map(stacks, fn {k, v} -> {k, Enum.reverse(v)} end) |> Enum.into(%{})
    %{stacks: stacks, instructions: moves}
  end

  # Unknown character
  def parse(<<_::utf8, rest::binary>>, stack_number, stacks, moves) do
    parse(rest, stack_number, stacks, moves)
  end

  def add_to_stack(stack, nil), do: stack

  def add_to_stack(stack, e) do
    [e | stack]
  end

  def move_to_stack(stacks, from, to, count) do
    Enum.reduce(1..count, stacks, fn
      _, %{^from => [head_from | tail_from], ^to => to_stack} = acc ->
        %{
          acc
          | from => tail_from,
            to => [head_from | to_stack]
        }
    end)
  end
end
```

```elixir
test_input = """
    [D]    
[N] [C]    
[Z] [M] [P]
 1   2   3 

move 1 from 2 to 1
move 3 from 1 to 3
move 2 from 2 to 1
move 1 from 1 to 2
"""

%{stacks: stacks, instructions: instructions} =
  puzzle_input
  |> Day5.parse()
  |> IO.inspect()

Enum.reduce(instructions, stacks, fn %{from: from, to: to, nb: count}, stacks ->
  Enum.reduce(1..count, stacks, fn
    _, %{^from => [head_from | tail_from], ^to => to_stack} = acc ->
      %{
        acc
        | from => tail_from,
          to => [head_from | to_stack]
      }
  end)
end)
|> Enum.reduce([], fn {_k, [first_letter | _]}, acc -> [first_letter | acc] end)
|> Enum.reverse()
```

```elixir
%{stacks: stacks, instructions: instructions} =
  puzzle_input
  |> Day5.parse()
```

```elixir
Enum.reduce(instructions, stacks, fn %{from: from, to: to, nb: count}, stacks ->
  to_stack = Enum.take(stacks[from], count) ++ stacks[to]
  from_stack = Enum.drop(stacks[from], count)

  %{
    stacks
    | from => from_stack,
      to => to_stack
  }
end)
|> Enum.reduce([], fn {_k, [first_letter | _]}, acc -> [first_letter | acc] end)
|> Enum.reverse()
```
